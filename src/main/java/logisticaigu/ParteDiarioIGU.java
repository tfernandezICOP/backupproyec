/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package logisticaigu;

import Controladoras.ControladoraMantenimiento;
import Controladoras.ControladoraMantenimientoRealizado;
import Controladoras.ControladoraParteDiario;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import logisticalogica.Mantenimiento;
import logisticalogica.MantenimientoRealizado;
import logisticalogica.ParteDiario;
import logisticalogica.Vehiculo;


public class ParteDiarioIGU extends javax.swing.JFrame {
    private Vehiculo vehiculoSeleccionado;
    private ControladoraParteDiario controladoraPD = new ControladoraParteDiario();
    private ControladoraMantenimiento controladoraMante = new ControladoraMantenimiento();
    private int kmMantenimiento = 10000; // Puedes asignar el valor que corresponda
    private ControladoraMantenimientoRealizado controlmanterealizado = new ControladoraMantenimientoRealizado();
    /**
     * Creates new form ParteDiarioIGU
     */
    public ParteDiarioIGU(Vehiculo vehiculoSeleccionado) {
         initComponents();
    this.vehiculoSeleccionado = vehiculoSeleccionado; 
    this.controladoraMante = controladoraMante;  // Inicializar la controladoraMante

    Date fechaActual = new Date();
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    jFormattedTextField1.setText(sdf.format(fechaActual));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Parte diario");

        jLabel2.setText("Fecha:");

        jLabel3.setText("Km recorridos:");

        jButton1.setText("Guardar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Volver");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(156, 156, 156)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(441, 441, 441)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)))
                        .addGap(0, 11, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 305, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        guardarParteDiario();
        // Preguntar al usuario si desea seguir haciendo parte diario
    int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea seguir haciendo parte diario?", "Confirmación", JOptionPane.YES_NO_OPTION);
    
    if (respuesta == JOptionPane.YES_OPTION) {
        // Si el usuario elige seguir, volver a la pantalla SeleccionVehiculoPD
        SeleccionVehiculoPD atras = new SeleccionVehiculoPD();
        atras.setVisible(true);
        dispose(); // Cierra la pantalla actual
    } else {
        // Si el usuario elige no seguir, volver al menú (reemplaza con tu lógica específica)
        Menu menu = new Menu();
        menu.setVisible(true);
        dispose(); // Cierra la pantalla actual
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       SeleccionVehiculoPD atras = new SeleccionVehiculoPD();
        atras.setVisible(true);
        dispose(); // Cierra la pantalla actual
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    
 private void guardarParteDiario() {
    try {
        // Obtener la fecha y km recorridos desde los campos del formulario
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Date fecha = sdf.parse(jFormattedTextField1.getText());
        int kmRecorridos = Integer.parseInt(jTextField1.getText());

        // Verificar si ya existe un ParteDiario para el Vehiculo
        ParteDiario parteDiarioExistente = controladoraPD.obtenerParteDiarioExistente(vehiculoSeleccionado);

        if (parteDiarioExistente != null) {
            // Si ya existe, sumar los km actuales a los existentes
            int kmTotales = parteDiarioExistente.getKm() + kmRecorridos;
            parteDiarioExistente.setFecha(fecha);
            parteDiarioExistente.setKm(kmTotales);
            controladoraPD.actualizarParteDiario(parteDiarioExistente);
            JOptionPane.showMessageDialog(this, "Parte diario actualizado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            // Verificar si se superaron los 10000 km y actualizar el mantenimiento
            Mantenimiento mantenimientoExistente = controladoraMante.obtenerMantenimientoExistente(vehiculoSeleccionado);
            if (mantenimientoExistente != null) {
                // Actualizar el mantenimiento existente con los nuevos km
                controladoraMante.actualizarMantenimiento(mantenimientoExistente, kmTotales);

                // Comparar los km del ParteDiario y el último Mantenimiento Realizado
                int kmDesdeUltimoMantenimiento = obtenerKmDesdeUltimoMantenimiento();
                if (kmDesdeUltimoMantenimiento > 10000) {
                    // Mostrar una alerta de mantenimiento
                    JOptionPane.showMessageDialog(this, "El vehículo ha superado los 10000 km desde el último mantenimiento realizado. Se recomienda realizar un nuevo mantenimiento.", "Alerta de mantenimiento", JOptionPane.WARNING_MESSAGE);
                }

                JOptionPane.showMessageDialog(this, "Mantenimiento actualizado. Kilómetros totales: " + kmTotales, "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Si no hay un mantenimiento existente, crear uno nuevo
                generarMantenimiento(kmTotales);
            }
        } else {
            // Si no existe, crear un nuevo ParteDiario
            ParteDiario nuevoParteDiario = new ParteDiario();
            nuevoParteDiario.setFecha(fecha);
            nuevoParteDiario.setKm(kmRecorridos);
            nuevoParteDiario.setVehiculo(vehiculoSeleccionado);
            controladoraPD.guardarpartediario(nuevoParteDiario);
            JOptionPane.showMessageDialog(this, "Parte diario guardado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            // Verificar si se superaron los 10000 km y generar un mantenimiento
            if (kmRecorridos > kmMantenimiento) {
                generarMantenimiento(kmRecorridos);
            }
        }

        // Puedes cerrar la ventana o realizar otras acciones según tu lógica de negocio
        this.dispose();
    } catch (ParseException | NumberFormatException ex) {
        // Manejar errores de conversión de fecha o número
        JOptionPane.showMessageDialog(this, "Error al guardar el parte diario. Verifica los datos ingresados.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}


private int obtenerKmDesdeUltimoMantenimiento() {
    // Obtener el último mantenimiento realizado
    MantenimientoRealizado ultimoMantenimiento = controlmanterealizado.obtenerUltimoMantenimientoRealizado(vehiculoSeleccionado);

    if (ultimoMantenimiento != null) {
        // Obtener el último ParteDiario
        ParteDiario parteDiarioExistente = controladoraPD.obtenerParteDiarioExistente(vehiculoSeleccionado);

        if (parteDiarioExistente != null) {
            // Calcular los kilómetros recorridos desde el último mantenimiento
            return parteDiarioExistente.getKm() - ultimoMantenimiento.getKmMantenimiento();
        } else {
            // Si no hay ParteDiario existente, se asume que es la primera vez
            return 0;
        }
    } else {
        // Si no hay mantenimientos realizados previos, se asume que es la primera vez
        return 0;
    }
}

private void generarMantenimiento( int kmTotales) {
    // Crear un objeto Mantenimiento
    Mantenimiento nuevoMantenimiento = new Mantenimiento();
    nuevoMantenimiento.setKm(kmTotales);
    nuevoMantenimiento.setVehiculo(vehiculoSeleccionado);

    // Guardar el Mantenimiento
    controladoraMante.guardarmantenimiento(nuevoMantenimiento);

    // Mostrar una alerta
    JOptionPane.showMessageDialog(this, "Se ha generado automáticamente un mantenimiento. Kilómetros totales: " + kmTotales, "Alerta de mantenimiento", JOptionPane.WARNING_MESSAGE);
}









    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}

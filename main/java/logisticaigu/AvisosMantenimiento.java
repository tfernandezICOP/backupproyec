/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package logisticaigu;

import Controladoras.ControladoraMantenimiento;
import Controladoras.ControladoraMantenimientoRealizado;
import Controladoras.ControladoraParteDiario;
import Controladoras.ControladoraVehiculo;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logisticalogica.Mantenimiento;
import logisticalogica.MantenimientoRealizado;
import logisticalogica.ParteDiario;
import logisticalogica.Vehiculo;

/**
 *
 * @author ULTRA
 */
public class AvisosMantenimiento extends javax.swing.JFrame {
    private ControladoraMantenimiento controladoramante = new ControladoraMantenimiento();
    private ControladoraVehiculo controladoravehiculo = new ControladoraVehiculo();
    private Vehiculo vehiculoseleccionado;
    private ControladoraMantenimientoRealizado controladoramanterealizado = new ControladoraMantenimientoRealizado();
    private ControladoraParteDiario controladoraPD = new ControladoraParteDiario();
    /**
     * Creates new form AvisosMantenimiento
     */
    public AvisosMantenimiento() {
        initComponents();
        cargarDatosTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Avisos de Mantenimiento");

        jButton1.setText("Aceptar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Volver");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Vehiculo", "Tipo", "Patente", "Kilometros"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(10, 10, 10)
                        .addComponent(jButton2)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 // Obtener la fila seleccionada
    int filaSeleccionada = jTable1.getSelectedRow();

    // Verificar si se ha seleccionado una fila
    if (filaSeleccionada != -1) {
        // Obtener el vehículo seleccionado de la fila
        vehiculoseleccionado = controladoravehiculo.obtenerVehiculosConMantenimiento().get(filaSeleccionada);

        // Abrir la ventana ConfirmarMantenimiento y pasar el vehículo seleccionado
        ConfirmarMantenimiento confirmarMantenimientoFrame = new ConfirmarMantenimiento(vehiculoseleccionado);
        confirmarMantenimientoFrame.setVisible(true);

        // Cerrar la ventana actual
        this.dispose();
    } else {
        // Mostrar un mensaje si no se ha seleccionado ninguna fila
        JOptionPane.showMessageDialog(this, "Seleccione un vehículo primero", "Error", JOptionPane.ERROR_MESSAGE);
    }
      
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      Menu atras = new Menu();
      atras.setVisible(true);
      dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AvisosMantenimiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AvisosMantenimiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AvisosMantenimiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AvisosMantenimiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AvisosMantenimiento().setVisible(true);
            }
        });
    }
private void cargarDatosTabla() {
    // Obtener la lista de vehículos desde la controladora
    List<Vehiculo> vehiculos = controladoravehiculo.obtenerTodosLosVehiculos();

    // Llenar el modelo de la tabla con los datos de los vehículos que necesitan mantenimiento
    DefaultTableModel modeloTabla = new DefaultTableModel();
    modeloTabla.addColumn("Vehiculo");
    modeloTabla.addColumn("Tipo");
    modeloTabla.addColumn("Patente");
    modeloTabla.addColumn("Kilometros Superados");

    for (Vehiculo vehiculo : vehiculos) {
        // Obtener el último mantenimiento realizado
        MantenimientoRealizado ultimoMantenimiento = controladoramanterealizado.obtenerUltimoMantenimientoRealizado(vehiculo);

        // Obtener todos los ParteDiario para el vehículo
        List<ParteDiario> parteDiarioList = controladoraPD.obtenerParteDiarioPorVehiculo(vehiculo);

        // Calcular los kilómetros totales recorridos desde el último mantenimiento
        int kmTotales = 0;
        if (!parteDiarioList.isEmpty()) {
            for (ParteDiario parteDiario : parteDiarioList) {
                kmTotales += parteDiario.getKm();
            }
        }

        // Restar los kilómetros del último mantenimiento
        if (ultimoMantenimiento != null) {
            kmTotales -= ultimoMantenimiento.getKmMantenimiento();
        }

        // Verificar si el vehículo necesita mantenimiento (supera los 10000 km)
        boolean necesitaMantenimiento = (ultimoMantenimiento != null && kmTotales >= 10000) ||
                (ultimoMantenimiento == null && vehiculo.getMantenimiento() != null && vehiculo.getMantenimiento().getKm() >= 10000);

        // Agregar a la tabla solo si necesita mantenimiento
        if (necesitaMantenimiento) {
            Object[] fila = {
                vehiculo.getMarca().getModelo(),
                vehiculo.getMarca().getTipo(),
                vehiculo.getPatente(),
                kmTotales
            };
            modeloTabla.addRow(fila);
        }
    }

    // Establecer el modelo en la tabla
    jTable1.setModel(modeloTabla);
}









    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
